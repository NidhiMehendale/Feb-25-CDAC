1. Dry run the code for n = 4. How many times is * printed? What is the time complexity?

void printTriangle(int n) {
for (int i = 0; i < n; i++)
for (int j = 0; j <= i; j++)
System.out.print("*");
}
Answer:-

Total * printed:
1+2+3+4 = 10

Time Complexity:
outer loop n and inner n+1 so, n*(n+1)/2
O(n^2)

2. Dry run for n = 8. What’s the number of iterations? Time complexity?

void printPattern(int n) {
for (int i = 1; i <= n; i *= 2)
for (int j = 0; j < n; j++)
System.out.println(i + "," + j);
}
Answer:- 
i*=2 --> 1,2,4,8...n 4*8=32 

Time Complexity:
O(nlogn)

3. Dry run for n = 20. How many recursive calls? What values are printed?

void recHalf(int n) {
if (n <= 0) return;
System.out.print(n + " ");
recHalf(n / 2);
}
Answer:- 
n,n/2,n/4,n/8 = O 

Time Complexity:
(log n)

4. Dry run for n = 3. How many total calls are made? What’s the time complexity?

void fun(int n) {
if (n == 0) return;
fun(n - 1);
fun(n - 1);
}

Answer:- 
T(n)=2T(n−1)+1 = T(1)=2(0)+1=1 
                 T(2)=2(1)+1=3
                 T(3)=2(3)+1=7
           	T(n)=2n−1 

Time Complexity:
O(2^n).		   

5. Dry run for n = 3. How many total iterations? Time complexity?

void tripleNested(int n) {
for (int i = 0; i < n; i++)
for (int j = 0; j < n; j++)
for (int k = 0; k < n; k++)
System.out.println(i + j + k);
}

Answer:- 
n*n*n = n3

Time Complexity:
O(n^3)